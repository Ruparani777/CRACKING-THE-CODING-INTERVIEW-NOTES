We commonly see O(log N) in runtimes. Where does this come from?  
Let's look at binary search as an example. In binary search, we are looking for an example x in an N-element  sorted array. We first compare x to the midpoint of the array. If x == middle, then we return. If x <  middle, then we search on the left side of the array. If x > middle, then we search on the right side of  the array.  
search 9 within {1, 5, 8, 9, 11, 13, 15, 19, 21}  
compare 9 to 11 -> smaller.  
search 9 within {1, 5, 8, 9, 11}  
compare 9 to 8 -> bigger  
search 9 within {9, 11}  
compare 9 to 9  
return  
We start off with an N-element array to search. Then, after a single step, we're down to Yi elements. One  more step, and we're down to % elements. We stop when we either find the value or we're down to just  one element.  
The total runtime is then a matter of how many steps (dividing N by 2 each time) we can take until N  becomes 1.  
N = 16  
N 8 /* divide by 2 */  
N 4 /* divide by 2 *I 
N 2 /* divide by 2 */  
N 1 I* divide by 2 */  
We could look at this in reverse (going from 1 to 16 instead of 16 to 1 ). How many times we can multiply 1  by 2 until we get N?  
N 1  
N 2  N 4  N 8  N 16  
/* multiply by 2 */  /* multiply by 2 */  /* multiply by 2 */  /* multiply by 2 */  
What is kin the expression 2k = N?This is exactly what log expresses.  
2• = 16 -> log2l6 = 4  
log2N = k -> 2k = N  
This is a good takeaway for you to have. When you see a problem where the number of elements in the  problem space gets halved each time, that will likely be a 0( log N) runtime.  
This is the same reason why finding an element in a balanced binary search tree is O ( log N). With each  comparison, we go either left or right. Half the nodes are on each side, so we cut the problem space in half  each time.  
I What's the base of the log?That's an excellent question!The short answer is that it doesn't matter  for the purposes of big 0. The longer explanation can be found at "Bases of Logs" on page 630.  
� Recursive Runtimes  
Here's a tricky one. What's the runtime of this code?  
1 int f(int n) {  
44 Cracking the Coding Interview, 6th Edition 
